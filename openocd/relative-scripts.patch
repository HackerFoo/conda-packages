diff --git a/src/helper/options.c b/src/helper/options.c
index 5351e82..1317e24 100644
--- src/helper/options.c
+++ src/helper/options.c
@@ -29,6 +29,9 @@
 /* @todo the inclusion of server.h here is a layering violation */
 #include <server/server.h>
 
+#include <unistd.h> // For readlink
+#include <linux/limits.h> // For MAX_PATH
+
 #include <getopt.h>
 
 static int help_flag, version_flag;
@@ -136,6 +139,33 @@ static void add_default_dirs(void)
 		add_script_search_dir(path);
 		free(path);
 	}
+
+#ifndef _WIN32
+	char strExePath[PATH_MAX*2];
+	ssize_t r = readlink("/proc/self/exe", strExePath, PATH_MAX);
+	if (r == -1) {
+		perror("readlink:");
+	} else {
+		strExePath[r] = '\0';
+		LOG_DEBUG("/proc/self/exec=%s", strExePath);
+
+		/* Strip executable file name, leaving path */
+		*strrchr(strExePath, '/') = '\0';
+
+		/* Replace /bin with paths */
+		char* bin = strrchr(strExePath, '/');
+
+		const char site_data_dir[] = "/share/openocd/site";
+		strcpy(bin, site_data_dir);
+		LOG_DEBUG("CONDA_RELATIVE_site=%s", strExePath);
+		add_script_search_dir(strExePath);
+
+		const char script_data_dir[] = "/share/openocd/scripts";
+		strcpy(bin, script_data_dir);
+		LOG_DEBUG("CONDA_RELATIVE_scripts=%s", strExePath);
+		add_script_search_dir(strExePath);
+	}
+#endif
 }
 
 int parse_cmdline_args(struct command_context *cmd_ctx, int argc, char *argv[])
