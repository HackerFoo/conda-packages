language: c
cache: ccache
cache:
  directories:
   - /tmp/really-really-really-really-really-really-really-really-really-really-really-really-really-long-path/conda/conda-bld/git_cache
   - /tmp/really-really-really-really-really-really-really-really-really-really-really-really-really-long-path/conda/conda-bld/src_cache
before_cache:
  - conda build purge

dist: trusty

sudo: false
addons:
  apt:
    packages:
    - autoconf
    - automake
    - build-essential
    - libftdi-dev
    - libudev1
    - libudev-dev
    - libusb-1.0-0-dev
    - libusb-dev
    - texinfo

install:
  - git submodule update --recursive --init
  - git submodule foreach git submodule update --recursive --init
  - export BASE_PATH=/tmp/really-really-really-really-really-really-really-really-really-really-really-really-really-long-path
  - export CONDA_PATH=$BASE_PATH/conda
  - mkdir -p $BASE_PATH
  - ./get-conda.sh $CONDA_PATH
  - export PATH="$PATH:$CONDA_PATH/bin"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda install pexpect
  - conda info -a
  - conda config --add channels timvideos
  - conda clean -s --dry-run
  - conda build purge
  - conda clean -s --dry-run
  - export CONDA_OUT=$(conda render $PACKAGE --output | sed -e's/-[0-9]\+\.tar/*.tar/' -e's/-git//')
  - autoconf --version
  - automake --version
  - libtool --version

env:
  # lm32 toolchain
  - PACKAGE=lm32/binutils
  - PACKAGE=lm32/gcc-nostdc
  - PACKAGE=lm32/gcc-newlib
  - PACKAGE=lm32/gdb
  # or1k toolchain
  - PACKAGE=or1k/binutils
  - PACKAGE=or1k/gcc-nostdc
  - PACKAGE=or1k/gcc-newlib
  - PACKAGE=or1k/gdb
  # riscv32 toolchain
  - PACKAGE=riscv32/binutils
  # sh2 toolchain
  - PACKAGE=sh2/binutils
  # fx2 toolchain
  - PACKAGE=sdcc
  # tools
  - PACKAGE=openocd
  - PACKAGE=flterm
  # verilog tools
  - PACKAGE=iverilog
  - PACKAGE=verilator
  - PACKAGE=yosys

script:
  - conda build --check $PACKAGE
  - $CONDA_PATH/bin/python ./.travis-output.py output.log conda build $PACKAGE
  - conda install $CONDA_OUT
  - du -h $CONDA_OUT
  - conda clean -s --dry-run

after_failure:
  - tail -n 1000 output.log
  - echo "========================"
  - echo "========================"
  - for i in $(find $BASE_PATH -name config.log); do echo $i; echo "-----------------------------------------"; cat $i; done
  - echo "========================"
  - echo "========================"
  - cat output.log

after_success:
  - tar -jtf $CONDA_OUT
  - if [ x$TRAVIS_BRANCH = x"master" ]; then anaconda -t $ANACONDA_TOKEN upload --user $ANACONDA_USER $CONDA_OUT; fi
